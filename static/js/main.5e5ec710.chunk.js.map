{"version":3,"sources":["components/Home.js","components/Creation.js","utils/mathUtils.js","components/Digicode.js","App.js","serviceWorker.js","index.js"],"names":["Home","Creation","getRandomInt","max","Math","round","random","Cypher","key","handlePlusClick","handleMinusClick","value","status","statusMessage","className","onClick","Digicode","useState","digicode","currentValues","setCurrentValues","setStatus","increment","i","decrement","console","log","cyphers","entries","push","match","every","forEach","App","to","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e5ec710.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Home() {\r\n  return (\r\n  <div>\r\n    <h2>Home</h2>\r\n    My Home page!\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction Creation() {\r\n  return (\r\n  <div>\r\n    <h2>Creation</h2>\r\n    Messages\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Creation;","export function getRandomInt(max) {\r\n    return Math.round(Math.random()*max);\r\n}","import React, { useState } from 'react';\r\nimport './Digicode.css';\r\nimport { getRandomInt } from '../utils/mathUtils';\r\n\r\nfunction Digicode() {\r\n    // STATE\r\n    const [ digicode ] = useState([getRandomInt(9), getRandomInt(9), getRandomInt(9), getRandomInt(9)]);\r\n    const [ currentValues, setCurrentValues ] = useState([ {value : 0, status : null}, {value : 0, status : null}, {value : 0, status : null}, {value : 0, status : null}]);\r\n    const [ status, setStatus ] = useState(null);\r\n    console.log(digicode)\r\n\r\n    function increment(i) {\r\n        if (currentValues[i].value >= 9) {\r\n            currentValues[i].value = 0;\r\n        } else {\r\n             currentValues[i].value = currentValues[i].value + 1;\r\n          }\r\n        setCurrentValues([...currentValues]);\r\n    }\r\n\r\n    function decrement(i) {\r\n        if (currentValues[i].value <= 0) {\r\n            currentValues[i].value = 9;\r\n        } else {\r\n            currentValues[i].value = currentValues[i].value - 1;\r\n        }\r\n        setCurrentValues([...currentValues]);\r\n    }\r\n\r\n    function check() {\r\n        const match = currentValues.every((value, i) => value.value === digicode[i]);\r\n        setStatus(match);\r\n        currentValues.forEach((value, i) => {\r\n            value.status = value.value === digicode[i];\r\n        });\r\n        setCurrentValues([...currentValues]);\r\n    }\r\n\r\n    // Generate as much Cyphers as we have numbers in the current digicode value\r\n    let cyphers = [];\r\n    for(let [i, value] of currentValues.entries()) {\r\n        cyphers.push(Cypher(value, i, increment, decrement));\r\n    }\r\n\r\n    // Generate the message if the digicode is right or wrong\r\n    let statusMessage = \"\";\r\n    if (status) {\r\n        statusMessage = <div className=\"status success\">Access granted</div> \r\n    } else if (status === false){\r\n        statusMessage = <div className=\"status error\">Access denied</div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Digicode</h2>\r\n            <p>Find the right digicode</p>\r\n            <br/>\r\n            <div className=\"cypher-container\">{cyphers}</div>\r\n            <button className=\"check-code\" onClick={ check }>Check your code</button>\r\n            { statusMessage }\r\n        </div>\r\n    )    \r\n}\r\n\r\nfunction Cypher({value, status}, key, handlePlusClick, handleMinusClick) {\r\n    let statusMessage = \"\";\r\n    if (status) {\r\n        statusMessage = <div className=\"cypher-status success\">V</div>\r\n    } else if (status === false){\r\n        statusMessage = <div className=\"cypher-status error\">X</div>\r\n    }\r\n\r\n    return (\r\n    <div key={ key+\"cypher\" } className=\"cypher\">\r\n        <button className=\"incrementing button\" onClick={ () => handlePlusClick(key) }>v</button>\r\n        <div className=\"value\">{ value }</div> \r\n        <button className=\"decrementing button\" onClick={ () => handleMinusClick(key)} >v</button>\r\n        <div>{ statusMessage }</div>\r\n    </div>)\r\n}\r\n\r\nexport default Digicode;","import React from 'react';\r\nimport './App.css';\r\nimport { Switch, Route, Link, Redirect } from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport Creation from './components/Creation';\r\nimport Digicode from './components/Digicode';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        RPG Master Tools\r\n      </header>\r\n      <div className=\"menu\">\r\n          <ul>\r\n            <li> <Link to=\"/\">Home</Link></li>\r\n            <li> <Link to=\"/digicode\">Digicode</Link> </li>\r\n            <li> <Link to=\"/creation\">Creation</Link> </li>\r\n          </ul>\r\n      </div>\r\n      <div className=\"App-intro\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home}/>\r\n          <Route path=\"/digicode\" component={Digicode}/>\r\n          <Route path=\"/creation\" component={Creation}/>\r\n          <Redirect to=\"/\"/>\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>, \r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}